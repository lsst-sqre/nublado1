apiVersion: apps/v1
kind: Deployment
metadata:
  name: hub
  labels:
    app: hub
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: hub
    selector:
      matchLabels:
        app: hub
    spec:
      serviceAccountName: hub
      securityContext:
        # Run as "jovyan" rather than root.
        runAsUser: 768
        runAsGroup: 768
        fsGroup: 768
      containers:
        - name: hub
          imagePullPolicy: "Always"
          image: "lsstsqre/sciplat-hub"
          resources:
            limits:
              memory: 2G
              cpu: 2.0
            requests:
              memory: 1G
              cpu: 0.8
          ports:
            - containerPort: 8081
              name: api
          env:
            - name: LOGLEVEL
              value: INFO
            - name: FQDN
              value: '{{HOSTNAME}}'
            - name: LAB_SELECTOR_TITLE
              value: '{{LAB_SELECTOR_TITLE}}'
            # Set to non-empty value to enable debugging.
            - name: DEBUG
              value: '{{DEBUG}}'
            # One of "github", "cilogon", or "jwt"
            - name: OAUTH_PROVIDER
              value: '{{OAUTH_PROVIDER}}'
            # If set, enables running lab containers with k8s privileges
            #  to start/stop/list containers (to spawn dask worker pods)
            - name: ALLOW_DASK_SPAWN
              value: '{{ALLOW_DASK_SPAWN}}'
            # If set, restricts lab or dask to run on containers with
            #  labels 'jupyterlab: ok' or 'dask: ok'
            - name: RESTRICT_LAB_NODES
              value: '{{RESTRICT_LAB_NODES}}'
            - name: RESTRICT_DASK_NODES
              value: '{{RESTRICT_DASK_NODES}}'
            # Maximum number of dask worker pods
            - name: MAX_DASK_WORKERS
              value: '{{MAX_DASK_WORKERS}}'
            # Set to customize what repo and what images to scan.
            - name: LAB_REPO_HOST
              value: '{{LAB_REPO_HOST}}'
            - name: LAB_REPO_OWNER
              value: '{{LAB_REPO_OWNER}}'
            - name: LAB_REPO_NAME
              value: '{{LAB_REPO_NAME}}'
            # Set if you want to change number of experimentals/dailies/
            #  weeklies/releases prepulled and displayed in menu
            #  (usually 0/3/2/1)
            - name: PREPULLER_EXPERIMENTALS
              value: '{{PREPULLER_EXPERIMENTALS}}'
            - name: PREPULLER_DAILIES
              value: '{{PREPULLER_DAILIES}}'
            - name: PREPULLER_WEEKLIES
              value: '{{PREPULLER_WEEKLIES}}'
            - name: PREPULLER_RELEASES
              value: '{{PREPULLER_RELEASES}}'
            # Set if you do not want to scan a repository for images.
            - name: LAB_IMAGE
              value: '{{LAB_IMAGE}}'
            # Set if you want something other than 12 hours.  Setting to
            # zero or a negative value disables.
            - name: LAB_CULL_TIMEOUT
              value: '{{LAB_CULL_TIMEOUT}}'
            #  one of 'idle' or 'age', a colon, and one of 'local' or
            #  'remote' ; locality is relative to the user lab pod.
            #  'idle:remote' is default.
            - name: LAB_CULL_POLICY
              value: '{{LAB_CULL_POLICY}}'
            - name: LAB_MEM_LIMIT
              value: '{{LAB_MEM_LIMIT}}'
            - name: LAB_CPU_LIMIT
              value: '{{LAB_CPU_LIMIT}}'
            - name: LAB_MEM_GUARANTEE
              value: '{{LAB_MEM_GUARANTEE}}'
            - name: LAB_CPU_GUARANTEE
              value: '{{LAB_CPU_GUARANTEE}}'
            - name: LAB_NODEJS_MAX_MEM
              value: '{{LAB_NODEJS_MAX_MEM}}'
            - name: TINY_CPU_MAX
              value: '{{TINY_CPU_MAX}}'
            - name: MB_PER_CPU
              value: '{{MB_PER_CPU}}'
            - name: LAB_SIZE_RANGE
              value: '{{LAB_SIZE_RANGE}}'
            - name: JUPYTERLAB_CONFIG_DIR
              value: '/opt/lsst/software/jupyterhub/config'
            - name: HUB_ROUTE
              value: '{{HUB_ROUTE}}'
            - name: FIREFLY_ROUTE
              value: '{{FIREFLY_ROUTE}}'
            - name: JS9_ROUTE
              value: '{{JS9_ROUTE}}'
            - name: API_ROUTE
              value: '{{API_ROUTE}}'
            - name: TAP_ROUTE
              value: '{{TAP_ROUTE}}'
            - name: SODA_ROUTE
              value: '{{SODA_ROUTE}}'
            - name: AUTO_REPO_URLS
              value: '{{AUTO_REPO_URLS}}'
            - name: SIZE_INDEX
              value: '{{SIZE_INDEX}}'
            - name: EXTERNAL_FILESERVER_IP
              value: '{{EXTERNAL_FILESERVER_IP}}'
            - name: EXTERNAL_FIREFLY_URL
              value: '{{EXTERNAL_FIREFLY_URL}}'
            - name: EXTERNAL_JS9_URL
              value: '{{EXTERNAL_JS9_URL}}'
            - name: EXTERNAL_INSTANCE_URL
              value: '{{EXTERNAL_INSTANCE_URL}}'
            - name: EXTERNAL_API_URL
              value: '{{EXTERNAL_API_URL}}'
            - name: EXTERNAL_SODA_URL
              value: '{{EXTERNAL_SODA_URL}}'
            - name: EXTERNAL_HUB_URL
              value: '{{EXTERNAL_HUB_URL}}'
            - name: GITHUB_ORGANIZATION_WHITELIST
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: github_organization_whitelist
            - name: CILOGON_GROUP_WHITELIST
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: cilogon_group_whitelist
            - name: GITHUB_ORGANIZATION_DENYLIST
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: github_organization_denylist
                  optional: true
            - name: CILOGON_GROUP_DENYLIST
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: cilogon_group_denylist
                  optional: true
            - name: OAUTH_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: oauth_client_id
            - name: OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: oauth_secret
            - name: OAUTH_CALLBACK_URL
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: oauth_callback_url
            # You want this if you're using CILogon rather than GitHub
            #  and not using 'cilogon.org'
            # - name: CILOGON_HOST
            #   value: 'test.cilogon.org'
            # Use this to restrict the list of available ID Providers
            #- name: CILOGON_IDP_SELECTION
            #  value: 'https://idp.ncsa.illinois.edu/idp/shibboleth'
            # Use this to set the CILogon skin
            #- name: CILOGON_SKIN
            #  value: 'LSST'
            # This may contain credentials, so it should be a secret
            - name: SESSION_DB_URL
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: session_db_url
            # This is one or more 32-byte encryption keys (separated
            # with ';') needed to persist auth_state.  They can be
            # base64 or hex-encoded.  Two lets you do key rotation
            - name: JUPYTERHUB_CRYPT_KEY
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: jupyterhub_crypto_key
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: hub
                  key: configproxy_auth_token
          # If you use sqlite, you want this to persist sessions across
          #  jupyterhub restarts.
          volumeMounts:
            - name: home-jovyan
              mountPath: /home/jovyan
            - name: hub-config
              mountPath: /opt/lsst/software/jupyterhub/config
            - name: fs-mounts
              mountPath: /opt/lsst/software/jupyterhub/mounts
            - name: resourcemap
              mountPath: /opt/lsst/software/jupyterhub/resources
            - name: jwt-cert
              mountPath: /opt/jwt
              readOnly: true
        #
        # This is for CloudSQL and does not work correctly yet.
        #
        # Change DB_IDENTIFIER here to include your GCP
        # project, the region of your Cloud SQL instance and the name
        # of your Cloud SQL instance. The format is
        # $PROJECT:$REGION:$INSTANCE
        # - name: cloudsql-proxy
        #  image: gcr.io/cloudsql-docker/gce-proxy
        #  imagePullPolicy: "Always"
        #  command: ["/cloud_sql_proxy",
        #            "-instances={{DB_IDENTIFIER}}=tcp:3306",
        #            "-credential_file=/secrets/cloudsql/credentials.json"]
        #  volumeMounts:
        #    - name: cloudsql-instance-credentials
        #      mountPath: /secrets/cloudsql
        #      readOnly: true
        #  env:
        #    - name: DB_USER
        #      valueFrom:
        #        secretKeyRef:
        #          name: cloudsql-db-credentials
        #          key: username
        #    - name: DB_PASSWORD
        #      valueFrom:
        #        secretKeyRef:
        #          name: cloudsql-db-credentials
        #          key: password
      volumes:
        #- name: cloudsql-instance-credentials
        #  secret:
        #    secretName: cloudsql-instance-credentials
        - name: home-jovyan
          persistentVolumeClaim:
           claimName: hub-physpvc
        - name: hub-config
          configMap:
            name: hub-config
            #  Create with `kubectl create configmap hub-config \
            #   --from-file=config/jupyterhub_config.py \
            #   --from-file=config/jupyterhub_config.d`
            #  It is sort of annoying that you still have to specify
            #   each file in the directory.
            items:
            - key: jupyterhub_config.py
              path: jupyterhub_config.py
            - key: 00-preamble.py
              path: jupyterhub_config.d/00-preamble.py
            - key: 10-authenticator.py
              path: jupyterhub_config.d/10-authenticator.py
            - key: 20-spawner.py
              path: jupyterhub_config.d/20-spawner.py
            - key: 30-environment.py
              path: jupyterhub_config.d/30-environment.py
        - configMap:
              #  Create with `kubectl create configmap jwt-cert \
              #   --from-file=config/signing-certificate.pem`
            defaultMode: 420
            items:
            - key: signing-certificate.pem
              path: signing-certificate.pem
            name: jwt-cert
          name: jwt-cert
        - configMap:
              #  Create with `kubectl create configmap fs-mounts \
              #   --from-file=config/mountpoints.json`
            defaultMode: 420
            items:
            - key: mountpoints.json
              path: mountpoints.json
            name: fs-mounts
          name: fs-mounts
        - configMap:
              #  Create with `kubectl create configmap resourcemap \
              #   --from-file=config/resourcemap.json`
            defaultMode: 420
            items:
            - key: resourcemap.json
              path: resourcemap.json
            name: resourcemap
          name: resourcemap
