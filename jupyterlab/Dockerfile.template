FROM {{BASE_IMAGE}}:{{TAG_PREFIX}}{{TAG}}
USER root
SHELL ["/bin/bash", "-lc"]
# If we don't have locales set correctly, the pip install pieces can fail.
ENV  LANG=en_US.UTF-8
ENV  LC_ALL=en_US.UTF-8
# This will be an interactive system, so we do want man pages after all
RUN  sed -i -e '/tsflags\=nodocs/d' /etc/yum.conf
RUN  rpm -qa --qf "%{NAME}\n" | xargs yum -y reinstall
# PROD branch only: Pin versions
# Install all the repos
RUN  S="script.rpm.sh" && \
      curl -s \
       https://packagecloud.io/install/repositories/github/git-lfs/${S} \
       -o /tmp/script.rpm.sh && \
      bash /tmp/script.rpm.sh && \
      rm /tmp/script.rpm.sh
RUN  cd /tmp && \
      curl -sL https://rpm.nodesource.com/setup_12.x -o node_repo.sh && \
      chmod 0755 node_repo.sh && \
      ./node_repo.sh && \
      rm ./node_repo.sh
ENV  epel_release="epel-release-7-11.noarch"
ENV  jl=/opt/lsst/software/jupyterlab
ENV  verdir=${jl}/versions.input
COPY versions/rpmlist.txt ${verdir}/rpmlist.txt
RUN  yum install -y ${epel_release}
RUN  yum repolist
RUN  yum -y install $(cat ${verdir}/rpmlist.txt | xargs)
# Install pip3
RUN  python3 -m ensurepip
# Install git-lfs
RUN  mkdir -p /usr/share/git
ENV  srcdir=/opt/lsst/src
RUN  mkdir -p ${srcdir}/thirdparty
# Install Hub
RUN  cd /tmp && \
     V="2.11.2" && \
     FN="hub-linux-amd64-${V}" && \
     F="${FN}.tgz" && \
     URL="https://github.com/github/hub/releases/download/v${V}/${F}" && \
     cmd="curl -L ${URL} -o ${F}" && \
     ${cmd} && \
     tar xpfz ${F} && \
     install -m 0755 ${FN}/bin/hub /usr/bin && \
     rm -rf ${F} ${FN}
# Install Snappy
# First we need a newer cmake
RUN  cd /tmp && \
      V="3.14.4" && \
      FN="cmake-${V}-Linux-x86_64" && \
      F="${FN}.tar.gz" && \
      URL="https://github.com/Kitware/CMake/releases/download/v${V}/${F}" && \
      cmd="curl -L ${URL} -o ${F}" && \
      ${cmd} && \
      cd /usr/local && \
      tar xvz --strip-components=1 -f /tmp/${F} && \
      cd /tmp && \
      rm -rf ${F} ${FN}
# Now we can build Snappy
RUN  cd ${srcdir}/thirdparty && \
      V="1.1.7" && \
      git clone -b ${V} https://github.com/google/snappy && \
      cd snappy && \
      git checkout -b ${V} && \
      mkdir build && \
      cd build && \
      /usr/local/bin/cmake -DBUILD_SHARED_LIBS=1 ../ && \
      make && \
      make install
# Install newer Proj -- but 6.0 is not cartopy-happy yet
RUN  cd ${srcdir}/thirdparty && \
      V="5.2.0" && \
      git clone -b ${V} https://github.com/OSGeo/proj.4.git && \
      cd proj.4 && \
      git checkout -b ${V} && \
      mkdir build && \
      cd build && \
      cmake ../ && \
      cmake --build . && \
      make install
# Install Pandoc
RUN  cd /tmp && \
      V="2.7.2" && \
      FN="pandoc-${V}-linux" && \
      F="${FN}.tar.gz" && \
      URL="https://github.com/jgm/pandoc/releases/download/${V}/${F}" && \
      cmd="curl -L ${URL} -o ${F}" && \
      ${cmd} && \
      tar xvfz ${F} -C /usr --strip-components=1 && \
      rm -rf ${F}
# This is for Fritz, and my nefarious plan to make the "te" in "Jupyter"
#  TECO
# We're not doing the "Make" alias--too likely to confuse
RUN  cd ${srcdir}/thirdparty && \
      git clone https://github.com/blakemcbride/TECOC.git && \
      cd TECOC/src && \
      make -f makefile.linux && \
      install -m 0755 tecoc /usr/local/bin && \
      mkdir -p /usr/local/share/doc/tecoc && \
      cp ../doc/* /usr/local/share/doc/tecoc && \
      cd /usr/local/bin && \
      for i in teco inspect mung; do \
          ln -s tecoc ${i} ; \
      done
# Install minimal LaTeX from TexLive
COPY texlive.profile /tmp
RUN  cd /tmp && \
      FN="install-tl-unx.tar.gz" && \
      wget http://mirror.ctan.org/systems/texlive/tlnet/${FN} && \
      tar xvpfz ${FN} && \
      ./install-tl-*/install-tl --repository \
        http://ctan.math.illinois.edu/systems/texlive/tlnet \
        --profile /tmp/texlive.profile && \
      rm -rf /tmp/${FN} /tmp/install-tl*
# More TeX stuff we need for PDF export
RUN  PATH=/usr/local/texlive/2019/bin/x86_64-linux:${PATH} && \
     tlmgr install caption lm adjustbox xkeyval collectbox xcolor \
     upquote eurosym ucs fancyvrb zapfding booktabs enumitem ulem palatino \
     mathpazo tcolorbox pgf environ trimspaces etoolbox float rsfs jknapltx
# This, bizarrely, has to be installed on its own to get the binaries.
RUN  PATH=/usr/local/texlive/2019/bin/x86_64-linux:${PATH} && \
     tlmgr install xetex && \
     ln -s /usr/local/texlive/2019/bin/x86_64-linux/xelatex \
           /usr/local/texlive/2019/bin/x86_64-linux/bibtex \
           /usr/bin
COPY versions/requirements-system.txt ${verdir}/requirements-system.txt
# Get newer setuptools before Python packages
RUN  pipver=$(grep ^pip\= ${verdir}/requirements-system.txt \
      | cut -d '=' -f 3) && \
      setupver=$(grep ^setuptools ${verdir}/requirements-system.txt \
      | cut -d '=' -f 3) && \
      pip3 install --upgrade pip==${pipver} setuptools==${setupver}
# Vaex-astro depends on kapteyn which is not Python 3.7 compatible...but the
#  following workaround does the trick:
#  https://github.com/SheffieldML/GPy/issues/649
#  ...but you need numpy and cython first.
RUN  numpver=$(grep ^numpy ${verdir}/requirements-system.txt \
       | cut -d '=' -f 3) && \
      cythver=$(grep ^Cython ${verdir}/requirements-system.txt \
       | cut -d '=' -f 3) && \
      sixver=$(grep ^six ${verdir}/requirements-system.txt \
       | cut -d '=' -f 3) && \
      pip3 install numpy==${numpver} \
                   cython==${cythver} \
		   six==${sixver} && \
      cd ${srcdir}/thirdparty && \
      git clone https://github.com/kapteyn-astro/kapteyn && \
      find kapteyn -name '*.pyx' -exec cython {} \; && \
      pip3 install kapteyn/
RUN  pip3 install --upgrade -r ${verdir}/requirements-system.txt
# scipy/pandas/numpy/astropy/matplotlib all already in LSST stack
ENV  LOADSTACK=/opt/lsst/software/stack/loadLSST.bash
# Work around the vaex-astro problem mentioned above, in the LSST stack env.
RUN  source ${LOADSTACK} && \
      cd ${srcdir}/thirdparty && \
      pip install kapteyn/
# Install Proj into stack environment
RUN  source ${LOADSTACK} && \
      conda install -y -c conda-forge 'proj4==5.2.0'
COPY versions/requirements-stack.txt ${verdir}/requirements-stack.txt      
RUN  source ${LOADSTACK} && \
      pip install --upgrade -r ${verdir}/requirements-stack.txt
# Pip installing breaks for cartopy: 23 Jan 2019
ENV  CARTOPY_VER="0.17.0"
RUN  cd ${srcdir}/thirdparty && \
      git clone -b v${CARTOPY_VER} https://github.com/SciTools/cartopy && \
      cd cartopy && \
      python3 setup.py install
RUN  source ${LOADSTACK} && \
      cd ${srcdir}/thirdparty/cartopy && \
      python setup.py install
# Add stack kernel
RUN source ${LOADSTACK} && \
     python3 -m ipykernel install --name 'LSST'
# Install our extensions
# First inject jupyter_notebook_config with terminado settings, *then*
#  edit it by adding jupyter server extensions.
ENV  NODE_OPTIONS="--max-old-space-size=6144 --max-http-header-size=16384"
RUN  mkdir -p /usr/etc/jupyter
COPY jupyter_notebook_config.json /usr/etc/jupyter
ENV SVXT="jupyterlab jupyter_firefly_extensions jupyterlab_lsstextensions \
          nbdime"
ENV NBXT="widgetsnbextension ipyevents nbdime"
# nbdime is special and already installed its extensions
RUN  nbdime extensions --disable --sys-prefix && \
     source ${LOADSTACK} && \
     nbdime extensions --disable --sys-prefix
RUN  mkdir -p ${jl}
RUN  set -e && \
      for s in $SVXT; do \
          jupyter serverextension enable ${s} --py --sys-prefix ; \
      done
RUN  set -e && \
      for n in $NBXT; do \
          jupyter nbextension install ${n} --py --sys-prefix && \
          jupyter nbextension enable ${n} --py  --sys-prefix ; \
      done
COPY versions/labext.txt ${verdir}/labext.txt
RUN  set -e && \
      LBXT=$(cat ${verdir}/labext.txt) && \
      for l in ${LBXT}; do \
          jupyter labextension install ${l} --no-build ; \
      done
# Create package version docs.
#COPY versions/ipyaladin.pr ${verdir}/ipyaladin.pr
ENV  instverdir=${jl}/versions.installed
RUN  mkdir -p ${instverdir}
RUN  pip3 freeze > ${instverdir}/requirements-system.txt && \
      source ${LOADSTACK} && \
      pip3 freeze > ${instverdir}/requirements-stack.txt && \
      rpm -qa | sort > ${instverdir}/rpmlist.txt
# Install ipyaladin extension from source until npm is updated.
#RUN  cd ${srcdir} && \
#      git clone https://github.com/cds-astro/ipyaladin && \
#      cd ipyaladin && \
#      ipa_pr="18" && \
#      echo ${ipa_pr} > ${instverdir}/ipyaladin.pr && \
#      git fetch origin pull/${ipa_pr}/head:pr${ipa_pr} && \
#      git checkout pr${ipa_pr} && \
#      cd js && \
#      npm install --unsafe-perm && \
#      cd .. && \
#      pip3 install -e . && \
#      cd js && \
#      jupyter labextension install --no-build
#RUN  gitxt="ipyaladin" && \
RUN  LBXT=$(cat ${verdir}/labext.txt) && \
      set -e && \
      for l in ${LBXT} ${gitxt} ; do \
          jupyter labextension enable ${l} ; \
      done
RUN  jupyter labextension disable \
      "@jupyterlab/filebrowser-extension:share-file"
RUN  npm cache clean --force && \
      jupyter lab clean && \
      jupyter lab build
RUN  jupyter labextension list 2>&1 | \
      grep '^      ' | grep -v ':' | \
      awk '{print $1,$2}' | tr ' ' '@' > ${instverdir}/labext.txt
# Lab extensions require write permissions by running user.
RUN  groupadd -g 768 jovyan && \
     uls="/usr/local/share" && \
     jlb="jupyter/lab" && \
     u="${uls}/${jlb}" && \
# If we recursively chown all of the lab directory, it gets rid of permission
# errors on startup....but also radically slows down startup, by about
# three minutes.
     mkdir -p ${u}/staging ${u}/schemas ${u}/themes && \
     set -e && \
     for i in ${srcdir} ${u}/staging; do \
         chgrp -R jovyan ${i} && \
         chmod -R g+w ${i} ; \
     done
# Clear caches
RUN  rm -rf /tmp/* /tmp/.[0-z]* /root/.cache/pip && \
      yum clean all
# Custom local files
COPY local02-hub.sh local03-showmotd.sh  \
     local04-pythonrc.sh local05-path.sh local06-scl.sh local07-term.sh \
     local08-virtualenvwrapper.sh \
     /etc/profile.d/
RUN  cd /etc/profile.d && \
      set -e && \
      for i in local*; do \
          ln ${i} $(basename ${i} .sh).csh ; \
      done
RUN  set -e && \
     for i in notebooks WORK DATA idleculler ; do \
        mkdir -p /etc/skel/${i} ; \
     done
COPY lsst_kernel.json \
       /usr/local/share/jupyter/kernels/lsst/kernel.json
COPY motd /etc/motd
COPY 20_jupytervars 30_provisionator /etc/sudoers.d/
COPY pythonrc /etc/skel/.pythonrc
COPY gitconfig /etc/skel/.gitconfig
COPY git-credentials /etc/skel/.git-credentials
COPY user_setups /etc/skel/notebooks/.user_setups
COPY lsst_kernel.json selfculler.py \
      lsstlaunch.bash runlab.sh refreshnb.sh \
      prepuller.sh provisionator.bash \
      lsstwrapdask.bash dask_worker.template.yml \
      ${jl}/
RUN  mkdir ${jl}/prov
COPY prov/addlabuser.bash prov/changestagingid.bash \
     prov/writeusersudoer.bash \
     ${jl}/prov/
# Otherwise ipyevents shows up in serverextensions, which it should not.
#  This is fixed in ipyevents 1.4.1, but we will leave the workaround in
#  place so we can rebuild previous releases if need be.
RUN  c="/usr/local/etc/jupyter/jupyter_notebook_config.d/ipyevents.json" && \
     if [ -f "${c}" ]; then \
         mv ${c} ${c}.disabled ; \
     fi
# Copy the static templates where Jupyter can find them.
RUN  c="/usr/local/share/jupyter/lab" && \
     cp -rp "${c}/staging/templates" "${c}/static"
# "lsst" is a real GitHub organization.
RUN  sed -i -e \
      's|^lsst:x:1000:1000::/home/lsst|lsst_lcl:x:1000:1000::/home/lsst_lcl|' \
      /etc/passwd && \
     sed -i -e 's/^lsst:x:1000/lsst_lcl:x:1000/' /etc/group && \
     pwconv && \
     grpconv && \
     if [ -d /home/lsst ]; then \
         mv /home/lsst /home/lsst_lcl ; \
     fi
RUN  groupadd -g 769 provisionator
RUN  useradd -m -g provisionator -u 769 -c "Provisioning User" provisionator
WORKDIR /tmp
# This needs to be numeric for k8s non-root contexts
USER 769:769
CMD [ "/opt/lsst/software/jupyterlab/provisionator.bash" ]
LABEL description="LSST Science Platform Notebook Aspect: {{IMAGE_NAME}}" \
       name="{{IMAGE_NAME}}" \
       version="{{VERSION}}"
